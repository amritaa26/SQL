<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Rewabhi/Downloads/Ex_Files_SQL_EssT/Ex_Files_SQL_EssT/Exercise Files/WSDA_Music.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="5253"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,7:mainInvoice"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Album" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="84"/><column index="2" value="280"/><column index="3" value="76"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Customer" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="111"/><column index="2" value="97"/><column index="3" value="105"/><column index="4" value="300"/><column index="5" value="300"/><column index="6" value="167"/><column index="7" value="55"/><column index="8" value="124"/><column index="9" value="106"/><column index="10" value="165"/><column index="11" value="157"/><column index="12" value="233"/><column index="13" value="131"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Invoice" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="93"/><column index="2" value="111"/><column index="3" value="162"/><column index="4" value="300"/><column index="5" value="167"/><column index="6" value="109"/><column index="7" value="132"/><column index="8" value="160"/><column index="9" value="66"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Track" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="75"/><column index="2" value="187"/><column index="3" value="84"/><column index="4" value="121"/><column index="5" value="80"/><column index="6" value="244"/><column index="7" value="115"/><column index="8" value="97"/><column index="9" value="88"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">/*
  This query displays all customers first, last name and email address.
*/
-- aliases, limit, orderby
SELECT 
   FirstName as[Customer Fisrt Name],
   LastName as [Customer Last Name],
   Email as EMAIL
FROM
  Customer
ORDER BY
  FirstName ASC,
  LastName DESC
LIMIT 10</sql><sql name="SQL 2">-- Where clause and operators
/*
Customers who purchased two songs at $0.99 each
*/
SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
  Invoice
WHERE
  total = 1.98
ORDER by 
  InvoiceDate

 -- Songs between 1.98 ans 5.00
 SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
  Invoice
WHERE
  total BETWEEN 1.98 AND 5.00
ORDER by 
  InvoiceDate
  
-- Songs that are exactly 1.98 or 3.96
SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
  Invoice
WHERE
  total in(1.98,3.96)
ORDER by 
  InvoiceDate</sql><sql name="SQL 3">-- Invoices billed to Brussels

SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
  Invoice
WHERE
  BillingCity = 'Brussels'
ORDER by 
  InvoiceDate

 SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
  Invoice
WHERE
  BillingCity in ('Brussels','Orlando','Paris')
ORDER by 
  InvoiceDate 
  </sql><sql name="SQL 5">--LIKE Operator - always work in conjuction called as wildcard
-- wildcard Character(%)

-- How many invoices were billed in cities that start with B
SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
  Invoice
WHERE
  BillingCity LIKE 'B%'
ORDER by 
  InvoiceDate 
  
  
SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
  Invoice
WHERE
  BillingCity LIKE '%B%'
ORDER by 
  InvoiceDate
  
-- Date Datatype
-- How many invoices were billed on May 22, 2010?

SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
  Invoice
WHERE
  InvoiceDate = '2010-05-22 00:00:00'
ORDER by 
  InvoiceDate

-- or we can use date datatype
SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
  Invoice
WHERE
  date(InvoiceDate)='2010-05-22'
ORDER by 
  InvoiceDate
  
-- get all invoices were billed after 2010-05-22 and have total of less than 3.00
--AND operator
SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
  Invoice
WHERE
  date(InvoiceDate)&gt;'2010-05-22' AND total&lt;3.00
ORDER by 
  InvoiceDate
  
-- Get all invoices whose billing city starts with P or D
--OR operator
SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
  Invoice
WHERE
  BillingCity LIKE 'P%'OR BillingCity LIKE 'D%'
ORDER by 
  InvoiceDate

--Get all invoices whose billing city starts with P or D and greater than 1.98
--Brackets and order
--PEMDAS and BEMDAS
SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
  Invoice
WHERE
  total &gt; 1.98 AND (BillingCity LIKE 'P%'OR BillingCity LIKE 'D%')
ORDER by 
  InvoiceDate
</sql><sql name="SQL 6">/*
If then logic with case
- They want as many customers as possible to spend between 7.00 and 15.00
 
Sales Categories
Baseline Purchase- Between 0.99 and 1.99
Low Purchase -     Between 2.00 and 6.99
Target Purchase-   Between 7.00 and 15.00
Top performer-     Above 15.00

*/

SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total,
  CASE
  WHEN total &lt; 2.00 THEN 'Baseline Purchase'
  WHEN total BETWEEN 2.00 AND 6.99 THEN 'Low Purchase'
  WHEN total BETWEEN 7.00 AND 15.00 THEN 'Target Purchase'
  ELSE 'Top performer'
  END as PurchaseType
FROM
  Invoice
ORDER by 
  BillingCity
  
SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total,
  CASE
  WHEN total &lt; 2.00 THEN 'Baseline Purchase'
  WHEN total BETWEEN 2.00 AND 6.99 THEN 'Low Purchase'
  WHEN total BETWEEN 7.00 AND 15.00 THEN 'Target Purchase'
  ELSE 'Top performer'
  END as PurchaseType
FROM
  Invoice
WHERE
   PurchaseType = 'Top performer'
ORDER by 
  BillingCity</sql><current_tab id="4"/></tab_sql></sqlb_project>
